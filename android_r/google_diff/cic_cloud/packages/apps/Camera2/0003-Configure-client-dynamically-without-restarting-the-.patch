From 45e06913536dea4cd097331b870ebbdf3fa2b891 Mon Sep 17 00:00:00 2001
From: "Singh, Sapna1" <sapna1.singh@intel.com>
Date: Thu, 25 Aug 2022 20:06:10 +0530
Subject: [PATCH] Configure client dynamically without restarting the AIC
 server

When clients with different camera capabilities
use same android instance, restarting and cache
cleanup is required for camera features to work
properly due to missing dynamic client's camera
information support.

Whenever a new client connects to AIC server,
it should query the capabilities and reset the
camera related parameters.

Change-Id: I2cf2e50a4ee2a602cdfe6e10982392eaf16bd21c
Tracked-On: OAM-103538
Signed-off-by: Singh, Sapna1 <sapna1.singh@intel.codm>
---
 src/com/android/camera/CaptureModule.java     |  7 ++++-
 src/com/android/camera/VideoModule.java       |  6 ++++
 .../android/camera/settings/AppUpgrader.java  | 30 +++++++++++++++++--
 .../settings/CameraPictureSizesCacher.java    |  4 ++-
 .../camera/settings/SettingsUpgrader.java     |  4 +--
 .../android/camera/settings/SettingsUtil.java |  7 -----
 6 files changed, 44 insertions(+), 14 deletions(-)

diff --git a/src/com/android/camera/CaptureModule.java b/src/com/android/camera/CaptureModule.java
index 00a58cd3c..8c3f1a6d4 100644
--- a/src/com/android/camera/CaptureModule.java
+++ b/src/com/android/camera/CaptureModule.java
@@ -95,6 +95,7 @@ import java.util.concurrent.Semaphore;
 import java.util.concurrent.TimeUnit;
 
 import javax.annotation.Nonnull;
+import android.hardware.Camera.CameraInfo;
 
 /**
  * New Capture module that is made to support photo and video capture on top of
@@ -399,6 +400,10 @@ public class CaptureModule extends CameraModule implements
 
     @Override
     public void init(CameraActivity activity, boolean isSecureCamera, boolean isCaptureIntent) {
+        int numOfCameras = android.hardware.Camera.getNumberOfCameras();
+        if (numOfCameras == 1) {
+            mSettingsManager.set(mAppController.getModuleScope(), Keys.KEY_CAMERA_ID, 0);
+        }
         Profile guard = mProfiler.create("CaptureModule.init").start();
         Log.d(TAG, "init UseAutotransformUiLayout = " + USE_AUTOTRANSFORM_UI_LAYOUT);
         HandlerThread thread = new HandlerThread("CaptureModule.mCameraHandler");
@@ -412,6 +417,7 @@ public class CaptureModule extends CameraModule implements
             Log.e(TAG, "Unable to provide a OneCameraManager. ", e);
         }
         mDisplayRotation = CameraUtil.getDisplayRotation();
+
         mCameraFacing = getFacingFromCameraId(
               mSettingsManager.getInteger(mAppController.getModuleScope(), Keys.KEY_CAMERA_ID));
         mShowErrorAndFinish = !updateCameraCharacteristics();
@@ -1149,7 +1155,6 @@ public class CaptureModule extends CameraModule implements
                     // has be set to the desired camera.
                     mSettingsManager.set(mAppController.getModuleScope(), Keys.KEY_CAMERA_ID,
                             cameraId);
-
                     Log.d(TAG, "Start to switch camera. cameraId=" + cameraId);
                     mCameraFacing = getFacingFromCameraId(cameraId);
                     mShowErrorAndFinish = !updateCameraCharacteristics();
diff --git a/src/com/android/camera/VideoModule.java b/src/com/android/camera/VideoModule.java
index e8222f6d3..406e0bd9b 100644
--- a/src/com/android/camera/VideoModule.java
+++ b/src/com/android/camera/VideoModule.java
@@ -76,6 +76,7 @@ import com.android.ex.camera2.portability.CameraAgent.CameraProxy;
 import com.android.ex.camera2.portability.CameraCapabilities;
 import com.android.ex.camera2.portability.CameraDeviceInfo.Characteristics;
 import com.android.ex.camera2.portability.CameraSettings;
+import android.hardware.Camera.CameraInfo;
 import com.google.common.logging.eventprotos;
 
 import java.io.File;
@@ -340,6 +341,11 @@ public class VideoModule extends CameraModule
         mActivity.setPreviewStatusListener(mUI);
 
         SettingsManager settingsManager = mActivity.getSettingsManager();
+        int numOfCameras = android.hardware.Camera.getNumberOfCameras();
+        if (numOfCameras == 1) {
+            //Everytime resetting the default Camera as 0th camera if there is only one camera present
+            settingsManager.set(mAppController.getModuleScope(), Keys.KEY_CAMERA_ID, 0);
+        }
         mCameraId = settingsManager.getInteger(mAppController.getModuleScope(),
                                                Keys.KEY_CAMERA_ID);
 
diff --git a/src/com/android/camera/settings/AppUpgrader.java b/src/com/android/camera/settings/AppUpgrader.java
index 930c3e24d..cce750ce5 100644
--- a/src/com/android/camera/settings/AppUpgrader.java
+++ b/src/com/android/camera/settings/AppUpgrader.java
@@ -121,9 +121,10 @@ public class AppUpgrader extends SettingsUpgrader {
     @Override
     public void upgrade(SettingsManager settingsManager, int lastVersion, int currentVersion) {
         Context context = mAppController.getAndroidContext();
-
+        CameraPictureSizesCacher.QueriedSizeForFirstTime = false;
         // Do strings upgrade first before 'earlier' upgrades, since they assume
         // valid storage of values.
+        lastVersion = 0;
         if (lastVersion < CAMERA_SETTINGS_STRINGS_UPGRADE) {
             upgradeTypesToStrings(settingsManager);
         }
@@ -136,10 +137,11 @@ public class AppUpgrader extends SettingsUpgrader {
             CameraDeviceInfo infos = CameraAgentFactory
                     .getAndroidCameraAgent(context, CameraAgentFactory.CameraApi.API_1)
                     .getCameraDeviceInfo();
-            upgradeCameraSizeSetting(settingsManager, context, infos,
-                    SettingsUtil.CAMERA_FACING_FRONT);
             upgradeCameraSizeSetting(settingsManager, context, infos,
                     SettingsUtil.CAMERA_FACING_BACK);
+
+            upgradeCameraSizeSetting(settingsManager, context, infos,
+                    SettingsUtil.CAMERA_FACING_FRONT);
             // We changed size handling and aspect ratio placement, put user
             // back into Camera mode this time to ensure they see the ratio
             // chooser if applicable.
@@ -176,6 +178,28 @@ public class AppUpgrader extends SettingsUpgrader {
         SharedPreferences oldGlobalPreferences =
                 settingsManager.openPreferences(OLD_GLOBAL_PREFERENCES_FILENAME);
 
+        if (defaultPreferences.contains(Keys.KEY_PICTURE_SIZE_BACK)) {
+            String PicSize = removeString(oldGlobalPreferences, Keys.KEY_PICTURE_SIZE_BACK);
+            settingsManager.set(SettingsManager.SCOPE_GLOBAL, Keys.KEY_PICTURE_SIZE_BACK, "null");
+        }
+
+        if (defaultPreferences.contains(Keys.KEY_PICTURE_SIZE_FRONT)) {
+            String PicSize = removeString(oldGlobalPreferences, Keys.KEY_PICTURE_SIZE_FRONT);
+            settingsManager.set(SettingsManager.SCOPE_GLOBAL, Keys.KEY_PICTURE_SIZE_FRONT, "null");
+        }
+
+        if (defaultPreferences.contains(Keys.KEY_VIDEO_QUALITY_BACK)) {
+            String PicSize = removeString(oldGlobalPreferences, Keys.KEY_VIDEO_QUALITY_BACK);
+            String defaultSize = settingsManager.getStringDefault(Keys.KEY_VIDEO_QUALITY_BACK);
+            settingsManager.set(SettingsManager.SCOPE_GLOBAL, Keys.KEY_VIDEO_QUALITY_BACK, defaultSize);
+        }
+
+        if (defaultPreferences.contains(Keys.KEY_VIDEO_QUALITY_FRONT)) {
+            String PicSize = removeString(oldGlobalPreferences, Keys.KEY_VIDEO_QUALITY_FRONT);
+            String defaultSize = settingsManager.getStringDefault(Keys.KEY_VIDEO_QUALITY_FRONT);
+            settingsManager.set(SettingsManager.SCOPE_GLOBAL, Keys.KEY_VIDEO_QUALITY_FRONT, defaultSize);
+        }
+
         // Location: boolean -> String, from default.
         if (defaultPreferences.contains(Keys.KEY_RECORD_LOCATION)) {
             boolean location = removeBoolean(defaultPreferences, Keys.KEY_RECORD_LOCATION);
diff --git a/src/com/android/camera/settings/CameraPictureSizesCacher.java b/src/com/android/camera/settings/CameraPictureSizesCacher.java
index 9cdca20bf..ef595f9a4 100644
--- a/src/com/android/camera/settings/CameraPictureSizesCacher.java
+++ b/src/com/android/camera/settings/CameraPictureSizesCacher.java
@@ -34,6 +34,7 @@ import java.util.List;
 public class CameraPictureSizesCacher {
     private static final String PICTURE_SIZES_BUILD_KEY = "CachedSupportedPictureSizes_Build_Camera";
     private static final String PICTURE_SIZES_SIZES_KEY = "CachedSupportedPictureSizes_Sizes_Camera";
+    public static boolean QueriedSizeForFirstTime = false;
 
     /**
      * Opportunistically update the picture sizes cache, if needed.
@@ -114,10 +115,11 @@ public class CameraPictureSizesCacher {
         String thisCameraCachedBuild = defaultPrefs.getString(key_build, null);
         if (thisCameraCachedBuild != null && thisCameraCachedBuild.equals(Build.DISPLAY)) {
             String thisCameraCachedSizeList = defaultPrefs.getString(key_sizes, null);
-            if (thisCameraCachedSizeList != null) {
+            if (thisCameraCachedSizeList != null && QueriedSizeForFirstTime) {
                 return Optional.of(Size.stringToList(thisCameraCachedSizeList));
             }
         }
+        QueriedSizeForFirstTime = true;
         return Optional.absent();
     }
 }
diff --git a/src/com/android/camera/settings/SettingsUpgrader.java b/src/com/android/camera/settings/SettingsUpgrader.java
index 4b38669ed..b6667d79f 100644
--- a/src/com/android/camera/settings/SettingsUpgrader.java
+++ b/src/com/android/camera/settings/SettingsUpgrader.java
@@ -50,9 +50,9 @@ public abstract class SettingsUpgrader {
      */
     public void upgrade(SettingsManager settingsManager) {
         int lastVersion = getLastVersion(settingsManager);
-        if (lastVersion != mTargetVersion) {
+        //if (lastVersion != mTargetVersion) {
             upgrade(settingsManager, lastVersion, mTargetVersion);
-        }
+        //}
         settingsManager.set(SettingsManager.SCOPE_GLOBAL, mVersionKey, mTargetVersion);
     }
 
diff --git a/src/com/android/camera/settings/SettingsUtil.java b/src/com/android/camera/settings/SettingsUtil.java
index 1b2673b7e..425444e1b 100644
--- a/src/com/android/camera/settings/SettingsUtil.java
+++ b/src/com/android/camera/settings/SettingsUtil.java
@@ -202,9 +202,6 @@ public class SettingsUtil {
      */
     static SelectedPictureSizes getSelectedCameraPictureSizes(List<Size> supported, int cameraId) {
         List<Size> supportedCopy = new LinkedList<Size>(supported);
-        if (sCachedSelectedPictureSizes.get(cameraId) != null) {
-            return sCachedSelectedPictureSizes.get(cameraId);
-        }
         if (supportedCopy == null) {
             return null;
         }
@@ -315,10 +312,6 @@ public class SettingsUtil {
     }
 
     static SelectedVideoQualities getSelectedVideoQualities(int cameraId) {
-        if (sCachedSelectedVideoQualities.get(cameraId) != null) {
-            return sCachedSelectedVideoQualities.get(cameraId);
-        }
-
         // Go through the sizes in descending order, see if they are supported,
         // and set large/medium/small accordingly.
         // If no quality is supported at all, the first call to
-- 
2.37.0

